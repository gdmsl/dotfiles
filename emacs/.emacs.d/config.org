#+Title: BeagleEmacs
#+Author: Guido Masella <guido.masella@gmail.com>
#+Date: 2020
Emacs configurations for personal usage. Based On Yay-Evil distro by Ian Y.E. Pan
* Settings without corresponding packages
Clean up the UI
#+BEGIN_SRC emacs-lisp
  (use-package emacs
    :config
    (setq frame-title-format '("BeagleEmacs")
          ring-bell-function 'ignore
          frame-resize-pixelwise t
          default-directory (expand-file-name "~/"))

    (tool-bar-mode -1)
    (menu-bar-mode -1)

    ;; better scrolling experience
    (setq scroll-margin 0
          scroll-conservatively 10000
          scroll-preserve-screen-position t
          auto-window-vscroll nil)

    ;; increase line space for better readability
    (setq-default line-spacing 3)

    ;; Always use spaces for indentation
    (setq-default indent-tabs-mode nil)

    (when (version<= "26.0.50" emacs-version)
          (global-display-line-numbers-mode))
  )
#+END_SRC
* Configuration for built-in packages
Since we're using use-package as our package management system, we might as well try to organise under the same syntax as much as possible to keep the configuration consistent. The option
~use-package-always-ensure~ is turned on in ~init.el~, so we'll add ~:ensure nil~ when configuring the built-in packages.
** Omit default startup screen
#+BEGIN_SRC emacs-lisp
  (use-package "startup"
    :ensure nil
    :config (setq inhibit-startup-screen t))
#+END_SRC
** Modernise selection behaviour
Replace the active region just by typing text, just like modern editors
#+BEGIN_SRC emacs-lisp
  (use-package delsel
    :ensure nil
    :config (delete-selection-mode +1))
#+END_SRC
** Disable scroll-bar
#+BEGIN_SRC emacs-lisp
  (use-package scroll-bar
    :ensure nil
    :config (scroll-bar-mode -1))
#+END_SRC
** Enable column numbers
#+BEGIN_SRC emacs-lisp
  (use-package simple
    :ensure nil
    :config (column-number-mode +1))
#+END_SRC
** Split right and split below
The Emacs default split doesn't seem too intuitive for the majority of users.
#+BEGIN_SRC emacs-lisp
  (use-package "window"
    :ensure nil
    :preface
    (defun ian/split-and-follow-horizontally ()
      "Split window below."
      (interactive)
      (split-window-below)
      (other-window 1))
    (defun ian/split-and-follow-vertically ()
      "Split window right."
      (interactive)
      (split-window-right)
      (other-window 1))
    :config
    (global-set-key (kbd "C-x 2") #'ian/split-and-follow-horizontally)
    (global-set-key (kbd "C-x 3") #'ian/split-and-follow-vertically))
#+END_SRC
** File-related tweaks
Don't bother confirming killing processes and don't let backup~ files scatter around
#+BEGIN_SRC emacs-lisp
  (use-package files
    :ensure nil
    :config
    (setq confirm-kill-processes nil
          make-backup-files nil))
#+END_SRC
** Automatically refreshes the buffer for changes outside of Emacs
Auto refreshes every 2 seconds. Don't forget to refresh the version control status as well.
#+BEGIN_SRC emacs-lisp
  (use-package autorevert
    :ensure nil
    :config
    (global-auto-revert-mode +1)
    (setq auto-revert-interval 2
          auto-revert-check-vc-info t
          global-auto-revert-non-file-buffers t
          auto-revert-verbose nil))
#+END_SRC
** Eldoc: documentation in the mini-buffer
Only use eldoc in prog-mode (by defaults it's turned on globally, but reports say it hinders performance).
#+BEGIN_SRC emacs-lisp
  (use-package eldoc
    :ensure nil
    :diminish eldoc-mode
    :config
    (global-eldoc-mode +1)
    (setq eldoc-idle-delay 0.4))
#+END_SRC
** Indentation improvement
For Java and C/C++, change the formatting style from GNU (the default) to the more standard K&R. Here we also set the indentation width of C, C++, Java, JavaScript, and Python to the preferred value defined in ~ian/indent-width~. Of course, you can change the value depending on the language as well.
#+BEGIN_SRC emacs-lisp
  ;; C, C++, and Java
  (use-package cc-vars
    :ensure nil
    :config
    (setq c-default-style '((java-mode . "java")
                            (awk-mode . "awk")
                            (other . "k&r"))))
#+END_SRC
** Mouse wheel (track-pad) scroll speed
By default, the scrolling is way too fast to be precise and helpful, let's tune it down a little bit.
#+BEGIN_SRC emacs-lisp
  (use-package mwheel
    :ensure nil
    :config (setq mouse-wheel-scroll-amount '(1 ((shift) . 1))
                  mouse-wheel-progressive-speed nil))
#+END_SRC
** Show matching parentheses
Reduce the highlight delay to instantly.
#+BEGIN_SRC emacs-lisp
  (use-package paren
    :ensure nil
    :init (setq show-paren-delay 0)
    :config (show-paren-mode +1))
#+END_SRC
** Setting up some frame defaults
Maximise the frame by default on start-up. Set the font to Fira Mono size 10.
#+BEGIN_SRC emacs-lisp
  (use-package frame
    :ensure nil
    :config
    (setq initial-frame-alist (quote ((fullscreen . maximized))))
    (when (member "Fira Mono" (font-family-list))
      (set-frame-font "Fira Mono-10" t t)))
#+END_SRC
** Ediff tweaks
Enter ediff with side-by-side buffers to better compare the differences.
#+BEGIN_SRC emacs-lisp
  (use-package ediff
    :ensure nil
    :config (setq ediff-split-window-function 'split-window-horizontally))
#+END_SRC
** Auto-pairing quotes and parentheses etc.
Electric-pair-mode has improved quite a bit in recent Emacs versions. No longer need an extra package for this. It also takes care of the new-line-and-push-brace feature.
#+BEGIN_SRC emacs-lisp
  (use-package elec-pair
    :ensure nil
    :hook (prog-mode . electric-pair-mode))
#+END_SRC
** Clean up whitespace on save
#+BEGIN_SRC emacs-lisp
  (use-package whitespace
    :ensure nil
    :hook (before-save . whitespace-cleanup))
#+END_SRC
** Dired tweaks
Delete intermediate buffers when navigating through dired.
#+begin_src emacs-lisp
  (use-package dired
    :ensure nil
    :config
    (setq delete-by-moving-to-trash t)
    (eval-after-load "dired"
      #'(lambda ()
          (put 'dired-find-alternate-file 'disabled nil)
          (define-key dired-mode-map (kbd "RET") #'dired-find-alternate-file))))
#+end_src
** Dump custom-set-variables to a garbage file and don't load it
#+BEGIN_SRC emacs-lisp
  (use-package cus-edit
    :ensure nil
    :config
    (setq custom-file "~/.emacs.d/to-be-dumped.el"))
#+END_SRC
* Third-party packages

Normally, we need to add ~:ensure t~ to tell ~use-package~ to download packages when it's not available. But since we've added ~use-package-always-ensure~ in ~init.el~, we can omit it.
** GUI enhancements
*** Theme
#+BEGIN_SRC emacs-lisp
  (add-to-list 'custom-theme-load-path "~/.emacs.d/themes/")
  (load-theme 'moe-dark t)
#+END_SRC
*** Dashboard welcome page
#+BEGIN_SRC emacs-lisp
  (use-package dashboard
    :ensure t
    :config
    (use-package page-break-lines)
    (dashboard-setup-startup-hook)
    (setq dashboard-startup-banner 'logo
          dashboard-banner-logo-title "BeagleEmacs"
          dashboard-items '((recents . 5)
                             (bookmarks . 5)
                             (projects . 5)
                             (agenda . 5)
                             (registers . 5))))
#+END_SRC
*** Icons
#+BEGIN_SRC emacs-lisp
(use-package all-the-icons)
#+END_SRC
*** Syntax highlighting
Lightweight syntax highlighting improvement for numbers, operators, and escape sequences.
#+BEGIN_SRC emacs-lisp
  (use-package highlight-numbers
    :hook (prog-mode . highlight-numbers-mode))

  (use-package highlight-operators
    :hook (prog-mode . highlight-operators-mode))

  (use-package highlight-escape-sequences
    :hook (prog-mode . hes-mode))
#+END_SRC
** Vi keybindings
I personally find Vi(m) bindings to be the most efficient way of editing text (especially code). I also changed the default ~:q~ and ~:wq~ to be killing current buffer instead of killing the frame or subsequently killing Emacs.
#+BEGIN_SRC emacs-lisp
  (use-package evil
    :diminish undo-tree-mode
    :init
    (setq evil-want-C-u-scroll t
          evil-want-keybinding nil)
    :hook (after-init . evil-mode)
    :preface
    (defun ian/save-and-kill-this-buffer ()
      (interactive)
      (save-buffer)
      (kill-this-buffer))
    :config
    (with-eval-after-load 'evil-maps ; avoid conflict with company tooltip selection
      (define-key evil-insert-state-map (kbd "C-n") nil)
      (define-key evil-insert-state-map (kbd "C-p") nil))
    (evil-ex-define-cmd "q" #'kill-this-buffer)
    (evil-ex-define-cmd "wq" #'ian/save-and-kill-this-buffer))
#+END_SRC
Evil-collection covers more parts of Emacs that the original Evil doesn't support (e.g. Packages buffer, eshell, calendar etc.)
#+BEGIN_SRC emacs-lisp
  (use-package evil-collection
    :after evil
    :config
    (setq evil-collection-company-use-tng nil)
    (evil-collection-init))
#+END_SRC
Tim Pope's vim commentary package (Use ~gcc~ to comment out a line, ~gc~ to comment out the target of a motion (for example, ~gcap~ to comment out a paragraph), ~gc~ in visual mode to comment out the selection etc.)
#+BEGIN_SRC emacs-lisp
  (use-package evil-commentary
    :after evil
    :diminish
    :config (evil-commentary-mode +1))
#+END_SRC
Evil keybindings for magit.
#+BEGIN_SRC emacs-lisp
  (use-package evil-magit)
#+END_SRC
** Git Integration
Tell magit to automatically put us in vi-insert-mode when committing a change.
#+BEGIN_SRC emacs-lisp
  (use-package magit
    :bind ("C-x g" . magit-status)
    :config (add-hook 'with-editor-mode-hook #'evil-insert-state))
#+END_SRC
** Searching/sorting enhancements & project management
*** Ido, ido-vertical, ido-ubiquitous and fuzzy matching
Selecting buffers/files with great efficiency. In my opinion, Ido is enough to replace Ivy/Counsel and Helm. We install ido-vertical to get a better view of the available options (use ~C-n~, ~C-p~ or arrow keys to navigate). Ido-ubiquitous (from the ~ido-completing-read+~ package) provides us ido-like completions in describing functions and variables etc. Fuzzy matching is a nice feature and we have flx-ido for that purpose.
#+BEGIN_SRC emacs-lisp
  (use-package ido
    :config
    (ido-mode +1)
    (setq ido-everywhere t
          ido-enable-flex-matching t))

  (use-package ido-vertical-mode
    :config
    (ido-vertical-mode +1)
    (setq ido-vertical-define-keys 'C-n-C-p-up-and-down))

  (use-package ido-completing-read+ :config (ido-ubiquitous-mode +1))

  (use-package flx-ido :config (flx-ido-mode +1))
#+END_SRC
*** Projectile
We will use ~projectile~ as project manager
#+BEGIN_SRC emacs-lisp
  (use-package projectile
    :ensure t
    :config
    (projectile-mode +1)
    (define-key projectile-mode-map (kbd "s-p") 'projectile-command-map)
    (define-key projectile-mode-map (kbd "C-c p") 'projectile-command-map)
    (setq projectile-project-search-path '("~/Develop/" "~/Work/")))
#+end_SRC
** Programming language support and utilities
*** Company for auto-completion
Use ~C-n~ and ~C-p~ to navigate the tooltip.
#+BEGIN_SRC emacs-lisp
  (use-package company
    :diminish company-mode
    :hook (prog-mode . company-mode)
    :config
    (setq company-minimum-prefix-length 1
          company-idle-delay 0.1
          company-selection-wrap-around t
          company-tooltip-align-annotations t
          company-frontends '(company-pseudo-tooltip-frontend ; show tooltip even for single candidate
                              company-echo-metadata-frontend))
    (with-eval-after-load 'company
      (define-key company-active-map (kbd "C-n") 'company-select-next)
      (define-key company-active-map (kbd "C-p") 'company-select-previous)))
#+END_SRC
*** Language server
#+BEGIN_SRC emacs-lisp
  (use-package company-lsp
    :custom
          (company-lsp-cache-candidates 'auto))
  (use-package lsp-mode
    :config
    (require 'lsp-clients)
    :hook ((c-mode c++-mode rust-mode go-mode python-mode sh-mode) . lsp)
    :commands lsp
    :custom
    (lsp-prefer-flymake nil))

  (setq-default lsp-clients-clangd-args nil
                lsp-ui-doc-max-height 30
                lsp-ui-doc-max-width 120
                lsp-ui-doc-use-webkit t
                lsp-ui-sideline-code-actions-prefix " "
                lsp-ui-sideline-ignore-duplicate t
                lsp-ui-sideline-show-hover nil;; really obnoxious
                )

  (use-package lsp-ui)
  (use-package dap-mode
    :config
    (require 'dap-gdb-lldb)
    ;;download debuggers, REQUIRES unzip
    (when (not (file-exists-p dap-utils-extension-path))
          (dap-utils-get-vscode-extension
           "webfreak" "debug")))
#+END_SRC
*** Flycheck
A modern on-the-fly syntax checking extension -- absolute essential
#+BEGIN_SRC emacs-lisp
  (use-package flycheck :config (global-flycheck-mode +1))
#+END_SRC
*** Org Mode
Some minimal org mode tweaks: org-bullets gives our headings (h1, h2, h3...) a more visually pleasing look.
#+BEGIN_SRC emacs-lisp
  (use-package org
    :hook ((org-mode . visual-line-mode)
           (org-mode . org-indent-mode))
    :bind
    ("C-c l" . org-store-link)
    :config
    (setq org-log-done t)
    (setq org-directory (expand-file-name (file-truename "~/Logging/Org"))))

  (use-package org-bullets :hook (org-mode . org-bullets-mode))

  (use-package org-agenda
    :ensure nil
    :after org
    :bind
    ("C-c a" . org-agenda)
    :config
    (setq org-agenda-files (list (expand-file-name "~/Logging/Org/agenda/work.org")
                                 (expand-file-name "~/Logging/Org/agenda/google.org"))))
#+END_SRC
*** Yasnippet & yasnippet-snippets
Use TAB to expand snippets. The code snippet below also avoids clashing with company-mode.
#+BEGIN_SRC emacs-lisp
  (use-package yasnippet-snippets
    :config
    (yas-global-mode +1)
    (advice-add 'company-complete-common
                :before
                (lambda ()
                  (setq my-company-point (point))))
    (advice-add 'company-complete-common
                :after
                (lambda ()
                  (when (equal my-company-point (point))
                    (yas-expand)))))
#+END_SRC
*** Useful major modes
Markdown mode and JSON mode
#+BEGIN_SRC emacs-lisp
  (use-package markdown-mode :hook (markdown-mode . visual-line-mode))

  (use-package json-mode)
  (use-package julia-mode)
#+END_SRC
** Miscellaneous
*** Diminish minor modes
The diminish package is used to hide unimportant minor modes in the modeline. It provides the ~:diminish~ keyword we've been using in other use-package declarations.
#+BEGIN_SRC emacs-lisp
  (use-package diminish
    :demand t)
#+END_SRC
*** Which-key
Provides us with hints on available keystroke combinations.
#+BEGIN_SRC emacs-lisp
  (use-package which-key
    :diminish which-key-mode
    :config
    (which-key-mode +1)
    (setq which-key-idle-delay 0.4
          which-key-idle-secondary-delay 0.4))
#+END_SRC
